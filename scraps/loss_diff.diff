20c20,24
< coef_1 = torch.exp(per_token_logps - old_per_token_logps)
---
> 
> # MODIFIED LINE: Your custom importance weights calculation
> # Replace the original line with your paper's formula
> coef_1 = torch.exp((per_token_logps * completion_mask - old_per_token_logps * completion_mask).sum(dim=1) / completion_mask.sum(dim=1))
> 
55,56c59,60
<         self.accelerator.gather_for_metrics(mean_kl).nanmean().item()  # type: ignore
<     )
---
>         self.accelerator.gather_for_metrics(mean_kl).nanmean().item()
>     )  # type: ignore
68c72
<         per_token_loss.size(0) * self.max_seq_len
---
>         per_token_loss.size(0) * self.max_completion_length
86,87c90,91
<     gathered_low_clip.nanmean().item()  # type: ignore
< )
---
>     gathered_low_clip.nanmean().item()
> )  # type: ignore
89,90c93,94
<     nanmin(gathered_low_clip).item()  # type: ignore
< )
---
>     self._nanmin(gathered_low_clip).item()
> )  # type: ignore
93,94c97,98
<     gathered_high_clip.nanmean().item()  # type: ignore
< )
---
>     gathered_high_clip.nanmean().item()
> )  # type: ignore
96,97c100,101
<     nanmax(gathered_high_clip).item()  # type: ignore
< )
---
>     self._nanmax(gathered_high_clip).item()
> )  # type: ignore
100,101c104,105
<     gathered_clip_ratio.nanmean().item()  # type: ignore
< )
---
>     gathered_clip_ratio.nanmean().item()
> )  # type: ignore
